// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: jwt-srv.proto

package jwt_srv

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for JWTManager service

type JWTManagerService interface {
	GenerateFreshAccessToken(ctx context.Context, in *UserData, opts ...client.CallOption) (*Token, error)
	GenerateAccessAndRefreshToken(ctx context.Context, in *UserData, opts ...client.CallOption) (*AccessAndRefreshToken, error)
	GenerateAccessAndRefreshTokenBasedOnRefreshToken(ctx context.Context, in *Token, opts ...client.CallOption) (*AccessAndRefreshToken, error)
	ValidateFreshAccessToken(ctx context.Context, in *Token, opts ...client.CallOption) (*Claims, error)
	ValidateToken(ctx context.Context, in *Token, opts ...client.CallOption) (*Claims, error)
}

type jWTManagerService struct {
	c    client.Client
	name string
}

func NewJWTManagerService(name string, c client.Client) JWTManagerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "jwtmanager"
	}
	return &jWTManagerService{
		c:    c,
		name: name,
	}
}

func (c *jWTManagerService) GenerateFreshAccessToken(ctx context.Context, in *UserData, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "JWTManager.GenerateFreshAccessToken", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jWTManagerService) GenerateAccessAndRefreshToken(ctx context.Context, in *UserData, opts ...client.CallOption) (*AccessAndRefreshToken, error) {
	req := c.c.NewRequest(c.name, "JWTManager.GenerateAccessAndRefreshToken", in)
	out := new(AccessAndRefreshToken)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jWTManagerService) GenerateAccessAndRefreshTokenBasedOnRefreshToken(ctx context.Context, in *Token, opts ...client.CallOption) (*AccessAndRefreshToken, error) {
	req := c.c.NewRequest(c.name, "JWTManager.GenerateAccessAndRefreshTokenBasedOnRefreshToken", in)
	out := new(AccessAndRefreshToken)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jWTManagerService) ValidateFreshAccessToken(ctx context.Context, in *Token, opts ...client.CallOption) (*Claims, error) {
	req := c.c.NewRequest(c.name, "JWTManager.ValidateFreshAccessToken", in)
	out := new(Claims)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jWTManagerService) ValidateToken(ctx context.Context, in *Token, opts ...client.CallOption) (*Claims, error) {
	req := c.c.NewRequest(c.name, "JWTManager.ValidateToken", in)
	out := new(Claims)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for JWTManager service

type JWTManagerHandler interface {
	GenerateFreshAccessToken(context.Context, *UserData, *Token) error
	GenerateAccessAndRefreshToken(context.Context, *UserData, *AccessAndRefreshToken) error
	GenerateAccessAndRefreshTokenBasedOnRefreshToken(context.Context, *Token, *AccessAndRefreshToken) error
	ValidateFreshAccessToken(context.Context, *Token, *Claims) error
	ValidateToken(context.Context, *Token, *Claims) error
}

func RegisterJWTManagerHandler(s server.Server, hdlr JWTManagerHandler, opts ...server.HandlerOption) error {
	type jWTManager interface {
		GenerateFreshAccessToken(ctx context.Context, in *UserData, out *Token) error
		GenerateAccessAndRefreshToken(ctx context.Context, in *UserData, out *AccessAndRefreshToken) error
		GenerateAccessAndRefreshTokenBasedOnRefreshToken(ctx context.Context, in *Token, out *AccessAndRefreshToken) error
		ValidateFreshAccessToken(ctx context.Context, in *Token, out *Claims) error
		ValidateToken(ctx context.Context, in *Token, out *Claims) error
	}
	type JWTManager struct {
		jWTManager
	}
	h := &jWTManagerHandler{hdlr}
	return s.Handle(s.NewHandler(&JWTManager{h}, opts...))
}

type jWTManagerHandler struct {
	JWTManagerHandler
}

func (h *jWTManagerHandler) GenerateFreshAccessToken(ctx context.Context, in *UserData, out *Token) error {
	return h.JWTManagerHandler.GenerateFreshAccessToken(ctx, in, out)
}

func (h *jWTManagerHandler) GenerateAccessAndRefreshToken(ctx context.Context, in *UserData, out *AccessAndRefreshToken) error {
	return h.JWTManagerHandler.GenerateAccessAndRefreshToken(ctx, in, out)
}

func (h *jWTManagerHandler) GenerateAccessAndRefreshTokenBasedOnRefreshToken(ctx context.Context, in *Token, out *AccessAndRefreshToken) error {
	return h.JWTManagerHandler.GenerateAccessAndRefreshTokenBasedOnRefreshToken(ctx, in, out)
}

func (h *jWTManagerHandler) ValidateFreshAccessToken(ctx context.Context, in *Token, out *Claims) error {
	return h.JWTManagerHandler.ValidateFreshAccessToken(ctx, in, out)
}

func (h *jWTManagerHandler) ValidateToken(ctx context.Context, in *Token, out *Claims) error {
	return h.JWTManagerHandler.ValidateToken(ctx, in, out)
}
