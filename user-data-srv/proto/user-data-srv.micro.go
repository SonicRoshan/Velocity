// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user-data-srv.proto

package user_data_srv

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserDataManager service

type UserDataManagerService interface {
	AddUser(ctx context.Context, in *UserData, opts ...client.CallOption) (*AddUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*UserData, error)
	GetUserByUsernameOrEmail(ctx context.Context, in *GetUserByUsernameOrEmailRequest, opts ...client.CallOption) (*UserData, error)
	AuthUser(ctx context.Context, in *AuthUserRequest, opts ...client.CallOption) (*AuthUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error)
}

type userDataManagerService struct {
	c    client.Client
	name string
}

func NewUserDataManagerService(name string, c client.Client) UserDataManagerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "userdatamanager"
	}
	return &userDataManagerService{
		c:    c,
		name: name,
	}
}

func (c *userDataManagerService) AddUser(ctx context.Context, in *UserData, opts ...client.CallOption) (*AddUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserDataManager.AddUser", in)
	out := new(AddUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerService) GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*UserData, error) {
	req := c.c.NewRequest(c.name, "UserDataManager.GetUser", in)
	out := new(UserData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerService) GetUserByUsernameOrEmail(ctx context.Context, in *GetUserByUsernameOrEmailRequest, opts ...client.CallOption) (*UserData, error) {
	req := c.c.NewRequest(c.name, "UserDataManager.GetUserByUsernameOrEmail", in)
	out := new(UserData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerService) AuthUser(ctx context.Context, in *AuthUserRequest, opts ...client.CallOption) (*AuthUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserDataManager.AuthUser", in)
	out := new(AuthUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerService) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UpdateUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserDataManager.UpdateUser", in)
	out := new(UpdateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataManagerService) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserDataManager.DeleteUser", in)
	out := new(DeleteUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserDataManager service

type UserDataManagerHandler interface {
	AddUser(context.Context, *UserData, *AddUserResponse) error
	GetUser(context.Context, *GetUserRequest, *UserData) error
	GetUserByUsernameOrEmail(context.Context, *GetUserByUsernameOrEmailRequest, *UserData) error
	AuthUser(context.Context, *AuthUserRequest, *AuthUserResponse) error
	UpdateUser(context.Context, *UpdateUserRequest, *UpdateUserResponse) error
	DeleteUser(context.Context, *DeleteUserRequest, *DeleteUserResponse) error
}

func RegisterUserDataManagerHandler(s server.Server, hdlr UserDataManagerHandler, opts ...server.HandlerOption) error {
	type userDataManager interface {
		AddUser(ctx context.Context, in *UserData, out *AddUserResponse) error
		GetUser(ctx context.Context, in *GetUserRequest, out *UserData) error
		GetUserByUsernameOrEmail(ctx context.Context, in *GetUserByUsernameOrEmailRequest, out *UserData) error
		AuthUser(ctx context.Context, in *AuthUserRequest, out *AuthUserResponse) error
		UpdateUser(ctx context.Context, in *UpdateUserRequest, out *UpdateUserResponse) error
		DeleteUser(ctx context.Context, in *DeleteUserRequest, out *DeleteUserResponse) error
	}
	type UserDataManager struct {
		userDataManager
	}
	h := &userDataManagerHandler{hdlr}
	return s.Handle(s.NewHandler(&UserDataManager{h}, opts...))
}

type userDataManagerHandler struct {
	UserDataManagerHandler
}

func (h *userDataManagerHandler) AddUser(ctx context.Context, in *UserData, out *AddUserResponse) error {
	return h.UserDataManagerHandler.AddUser(ctx, in, out)
}

func (h *userDataManagerHandler) GetUser(ctx context.Context, in *GetUserRequest, out *UserData) error {
	return h.UserDataManagerHandler.GetUser(ctx, in, out)
}

func (h *userDataManagerHandler) GetUserByUsernameOrEmail(ctx context.Context, in *GetUserByUsernameOrEmailRequest, out *UserData) error {
	return h.UserDataManagerHandler.GetUserByUsernameOrEmail(ctx, in, out)
}

func (h *userDataManagerHandler) AuthUser(ctx context.Context, in *AuthUserRequest, out *AuthUserResponse) error {
	return h.UserDataManagerHandler.AuthUser(ctx, in, out)
}

func (h *userDataManagerHandler) UpdateUser(ctx context.Context, in *UpdateUserRequest, out *UpdateUserResponse) error {
	return h.UserDataManagerHandler.UpdateUser(ctx, in, out)
}

func (h *userDataManagerHandler) DeleteUser(ctx context.Context, in *DeleteUserRequest, out *DeleteUserResponse) error {
	return h.UserDataManagerHandler.DeleteUser(ctx, in, out)
}
