// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: email-verification-srv.proto

package email_verification_srv

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for EmailVerification service

type EmailVerificationService interface {
	SendVerification(ctx context.Context, in *SendVerificationRequest, opts ...client.CallOption) (*SendVerificationResponse, error)
	Verify(ctx context.Context, in *VerifyRequest, opts ...client.CallOption) (*VerifyResponse, error)
}

type emailVerificationService struct {
	c    client.Client
	name string
}

func NewEmailVerificationService(name string, c client.Client) EmailVerificationService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "emailverification"
	}
	return &emailVerificationService{
		c:    c,
		name: name,
	}
}

func (c *emailVerificationService) SendVerification(ctx context.Context, in *SendVerificationRequest, opts ...client.CallOption) (*SendVerificationResponse, error) {
	req := c.c.NewRequest(c.name, "EmailVerification.SendVerification", in)
	out := new(SendVerificationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailVerificationService) Verify(ctx context.Context, in *VerifyRequest, opts ...client.CallOption) (*VerifyResponse, error) {
	req := c.c.NewRequest(c.name, "EmailVerification.Verify", in)
	out := new(VerifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EmailVerification service

type EmailVerificationHandler interface {
	SendVerification(context.Context, *SendVerificationRequest, *SendVerificationResponse) error
	Verify(context.Context, *VerifyRequest, *VerifyResponse) error
}

func RegisterEmailVerificationHandler(s server.Server, hdlr EmailVerificationHandler, opts ...server.HandlerOption) error {
	type emailVerification interface {
		SendVerification(ctx context.Context, in *SendVerificationRequest, out *SendVerificationResponse) error
		Verify(ctx context.Context, in *VerifyRequest, out *VerifyResponse) error
	}
	type EmailVerification struct {
		emailVerification
	}
	h := &emailVerificationHandler{hdlr}
	return s.Handle(s.NewHandler(&EmailVerification{h}, opts...))
}

type emailVerificationHandler struct {
	EmailVerificationHandler
}

func (h *emailVerificationHandler) SendVerification(ctx context.Context, in *SendVerificationRequest, out *SendVerificationResponse) error {
	return h.EmailVerificationHandler.SendVerification(ctx, in, out)
}

func (h *emailVerificationHandler) Verify(ctx context.Context, in *VerifyRequest, out *VerifyResponse) error {
	return h.EmailVerificationHandler.Verify(ctx, in, out)
}
